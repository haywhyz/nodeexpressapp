# name: Build, Push, and Scan Docker Image

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-push-scan:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout Repository
#       uses: actions/checkout@v2

#     - name: Set up Docker
#       uses: docker/setup-docker-action@v2
#       with:
#         dockerfile: ./Dockerfile 

#     - name: Build Docker Image
#       run: docker build -t ${{ secrets.DOCKER_REGISTRY }}/your-image-name:latest .

#     - name: Push Docker Image to Registry
#       run: |
#         echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin ${{ secrets.DOCKER_REGISTRY }}
#         docker push ${{ secrets.DOCKER_REGISTRY }}/nodeapp:latest

#     - name: Set up Trivy
#       uses: aquasecurity/trivy-action@v0.9.3

#     - name: Scan Docker Image
#       run: trivy ${{ secrets.DOCKER_REGISTRY }}/your-image-name:latest



# name: Build, Push, and Scan Docker Image

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-push-scan:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout Repository
#       uses: actions/checkout@v2

#     - name: Set up Docker
#       uses: docker://docker

#     - name: Build Docker Image
#       run: docker build -t ${{ secrets.DOCKER_REGISTRY }}5056/nodeapp:latest .

#     - name: Push Docker Image to Registry
#       run: |
#         echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin ${{ secrets.DOCKER_REGISTRY }}
#         docker push ${{ secrets.DOCKER_REGISTRY }}5056/nodeapp:latest

#     - name: Set up Trivy
#       run: |
#         docker pull aquasec/trivy:latest
#         docker tag aquasec/trivy:latest trivy:latest

#     - name: Scan Docker Image
#       run: docker run --rm trivy:latest --ignore-unfixed ${{ secrets.DOCKER_REGISTRY }}5056/nodeapp:latest



# name: Build, Scan, and Deploy Docker Image

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout Repository
#       uses: actions/checkout@v2

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v1

#     - name: Build Docker Image
#       run: |
#         docker buildx create --use
#         docker buildx inspect --bootstrap
#         docker buildx build -t 5056/nodeapp:latest .

  # scan:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v2

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v1

  #   - name: Scan Docker Image with Trivy
  #     run: |
  #       docker buildx create --use
  #       docker buildx inspect --bootstrap
  #       docker run --rm -v $(pwd):/src aquasec/trivy -q docker.io/5056/nodeapp:latest

  # deploy:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v2

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v1

  #   - name: Login to Docker Hub
  #     run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Push Docker Image to Docker Hub
  #     run: |
  #       docker buildx create --use
  #       docker buildx inspect --bootstrap
  #       docker push docker.io/5056/nodeapp:latest



on:
  push:
    branches:
      - main

name: Deploy nodeapp to Docker Hub with version tag

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set version number
        id: version
        run: echo "VERSION=v$((GITHUB_RUN_NUMBER))"
        shell: bash

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build, tag, and push image to Docker Hub
        env:
          DOCKERHUB_REPO: 5056/nodeapp
          IMAGE_TAG: ${{ steps.version.outputs.VERSION }}
        run: |
          # Build a docker container 
          # push it to Docker Hub.
          docker build -t $DOCKERHUB_REPO:$IMAGE_TAG .
          docker push $DOCKERHUB_REPO:$IMAGE_TAG



